{"id":1056,"fid":"1011","name":"在 D 天内送达包裹的能力","slug":"capacity-to-ship-packages-within-d-days","link":"https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/description/","percent":63.34282073940116,"level":"Medium","category":"algorithms","en_name":"Capacity To Ship Packages Within D Days","cn_name":"在 D 天内送达包裹的能力","totalAC":"123.7K","totalSubmit":"195.3K","likes":671,"dislikes":0,"desc":"<p>传送带上的包裹必须在 <code>days</code> 天内从一个港口运送到另一个港口。</p>\n\n<p>传送带上的第 <code>i</code>&nbsp;个包裹的重量为&nbsp;<code>weights[i]</code>。每一天，我们都会按给出重量（<code>weights</code>）的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。</p>\n\n<p>返回能在 <code>days</code> 天内将传送带上的所有包裹送达的船的最低运载能力。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>weights = [1,2,3,4,5,6,7,8,9,10], days = 5\n<strong>输出：</strong>15\n<strong>解释：</strong>\n船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：\n第 1 天：1, 2, 3, 4, 5\n第 2 天：6, 7\n第 3 天：8\n第 4 天：9\n第 5 天：10\n\n请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。 \n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>weights = [3,2,2,4,1,4], days = 3\n<strong>输出：</strong>6\n<strong>解释：</strong>\n船舶最低载重 6 就能够在 3 天内送达所有包裹，如下所示：\n第 1 天：3, 2\n第 2 天：2, 4\n第 3 天：1, 4\n</pre>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>weights = [1,2,3,1,1], days = 4\n<strong>输出：</strong>3\n<strong>解释：</strong>\n第 1 天：1\n第 2 天：2\n第 3 天：3\n第 4 天：1, 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= days &lt;= weights.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= weights[i] &lt;= 500</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int shipWithinDays(vector<int>& weights, int days) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int shipWithinDays(int[] weights, int days) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def shipWithinDays(self, weights, days):\n        \"\"\"\n        :type weights: List[int]\n        :type days: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} weights\n * @param {number} days\n * @return {number}\n */\nvar shipWithinDays = function(weights, days) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function shipWithinDays(weights: number[], days: number): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ShipWithinDays(int[] weights, int days) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int shipWithinDays(int* weights, int weightsSize, int days) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func shipWithinDays(weights []int, days int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun shipWithinDays(weights: IntArray, days: Int): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shipWithinDays(_ weights: [Int], _ days: Int) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn ship_within_days(weights: Vec<i32>, days: i32) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} weights\n# @param {Integer} days\n# @return {Integer}\ndef ship_within_days(weights, days)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $weights\n     * @param Integer $days\n     * @return Integer\n     */\n    function shipWithinDays($weights, $days) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int shipWithinDays(List<int> weights, int days) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def shipWithinDays(weights: Array[Int], days: Int): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec ship_within_days(weights :: [integer], days :: integer) :: integer\n  def ship_within_days(weights, days) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec ship_within_days(Weights :: [integer()], Days :: integer()) -> integer().\nship_within_days(Weights, Days) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (ship-within-days weights days)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func shipWithinDays(weights: Array<Int64>, days: Int64): Int64 {\n\n    }\n}"}],"testcase":"[1,2,3,4,5,6,7,8,9,10]\n5","testable":true,"templateMeta":{"name":"shipWithinDays","params":[{"name":"weights","type":"integer[]"},{"name":"days","type":"integer"}],"return":{"type":"integer"}}}
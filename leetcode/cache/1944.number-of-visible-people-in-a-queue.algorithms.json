{"id":1305,"fid":"1944","name":"队列中可以看到的人数","slug":"number-of-visible-people-in-a-queue","link":"https://leetcode.cn/problems/number-of-visible-people-in-a-queue/description/","percent":69.58352831071596,"level":"Hard","category":"algorithms","en_name":"Number of Visible People in a Queue","cn_name":"队列中可以看到的人数","totalAC":"28.3K","totalSubmit":"40.7K","likes":177,"dislikes":0,"desc":"<p>有&nbsp;<code>n</code>&nbsp;个人排成一个队列，<strong>从左到右</strong>&nbsp;编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。给你以一个整数数组&nbsp;<code>heights</code>&nbsp;，每个整数 <strong>互不相同</strong>，<code>heights[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个人的高度。</p>\n\n<p>一个人能 <strong>看到</strong> 他右边另一个人的条件是这两人之间的所有人都比他们两人 <strong>矮</strong>&nbsp;。更正式的，第&nbsp;<code>i</code>&nbsp;个人能看到第&nbsp;<code>j</code>&nbsp;个人的条件是&nbsp;<code>i &lt; j</code>&nbsp;且&nbsp;<code>min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], ..., heights[j-1])</code>&nbsp;。</p>\n\n<p>请你返回一个长度为 <code>n</code>&nbsp;的数组<em>&nbsp;</em><code>answer</code><em>&nbsp;</em>，其中<em>&nbsp;</em><code>answer[i]</code><em>&nbsp;</em>是第&nbsp;<code>i</code>&nbsp;个人在他右侧队列中能&nbsp;<strong>看到</strong>&nbsp;的&nbsp;<strong>人数</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/29/queue-plane.jpg\" style=\"width: 600px; height: 247px;\" /></p>\n\n<pre>\n<b>输入：</b>heights = [10,6,8,5,11,9]\n<b>输出：</b>[3,1,2,1,1,0]\n<strong>解释：</strong>\n第 0 个人能看到编号为 1 ，2 和 4 的人。\n第 1 个人能看到编号为 2 的人。\n第 2 个人能看到编号为 3 和 4 的人。\n第 3 个人能看到编号为 4 的人。\n第 4 个人能看到编号为 5 的人。\n第 5 个人谁也看不到因为他右边没人。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>heights = [5,1,2,3,10]\n<b>输出：</b>[4,1,1,1,0]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == heights.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>heights</code>&nbsp;中所有数 <strong>互不相同</strong>&nbsp;。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> canSeePersonsCount(vector<int>& heights) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] canSeePersonsCount(int[] heights) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def canSeePersonsCount(self, heights: List[int]) -> List[int]:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def canSeePersonsCount(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} heights\n * @return {number[]}\n */\nvar canSeePersonsCount = function(heights) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function canSeePersonsCount(heights: number[]): number[] {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] CanSeePersonsCount(int[] heights) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* canSeePersonsCount(int* heights, int heightsSize, int* returnSize) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func canSeePersonsCount(heights []int) []int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canSeePersonsCount(heights: IntArray): IntArray {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canSeePersonsCount(_ heights: [Int]) -> [Int] {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn can_see_persons_count(heights: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} heights\n# @return {Integer[]}\ndef can_see_persons_count(heights)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer[]\n     */\n    function canSeePersonsCount($heights) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> canSeePersonsCount(List<int> heights) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canSeePersonsCount(heights: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec can_see_persons_count(heights :: [integer]) :: [integer]\n  def can_see_persons_count(heights) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec can_see_persons_count(Heights :: [integer()]) -> [integer()].\ncan_see_persons_count(Heights) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (can-see-persons-count heights)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func canSeePersonsCount(heights: Array<Int64>): Array<Int64> {\n\n    }\n}"}],"testcase":"[10,6,8,5,11,9]","testable":true,"templateMeta":{"name":"canSeePersonsCount","params":[{"type":"integer[]","name":"heights"}],"return":{"type":"integer[]"}}}
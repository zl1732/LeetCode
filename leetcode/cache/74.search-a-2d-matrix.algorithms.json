{"id":74,"fid":"74","name":"搜索二维矩阵","slug":"search-a-2d-matrix","link":"https://leetcode.cn/problems/search-a-2d-matrix/description/","percent":51.765209064373266,"level":"Medium","category":"algorithms","en_name":"Search a 2D Matrix","cn_name":"搜索二维矩阵","totalAC":"634.5K","totalSubmit":"1.2M","likes":1086,"dislikes":0,"desc":"<p>给你一个满足下述两条属性的 <code>m x n</code> 整数矩阵：</p>\n\n<ul>\n\t<li>每行中的整数从左到右按非严格递增顺序排列。</li>\n\t<li>每行的第一个整数大于前一行的最后一个整数。</li>\n</ul>\n\n<p>给你一个整数 <code>target</code> ，如果 <code>target</code> 在矩阵中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>输入：</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/mat2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>输入：</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function searchMatrix(matrix: number[][], target: number): boolean {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func searchMatrix(matrix [][]int, target int) bool {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $target\n     * @return Boolean\n     */\n    function searchMatrix($matrix, $target) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool searchMatrix(List<List<int>> matrix, int target) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec search_matrix(matrix :: [[integer]], target :: integer) :: boolean\n  def search_matrix(matrix, target) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec search_matrix(Matrix :: [[integer()]], Target :: integer()) -> boolean().\nsearch_matrix(Matrix, Target) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (search-matrix matrix target)\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func searchMatrix(matrix: Array<Array<Int64>>, target: Int64): Bool {\n\n    }\n}"}],"testcase":"[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n3","testable":true,"templateMeta":{"name":"searchMatrix","params":[{"name":"matrix","type":"integer[][]"},{"name":"target","type":"integer"}],"return":{"type":"boolean"}}}
{"id":967,"fid":"931","name":"下降路径最小和","slug":"minimum-falling-path-sum","link":"https://leetcode.cn/problems/minimum-falling-path-sum/description/","percent":67.89018101708794,"level":"Medium","category":"algorithms","en_name":"Minimum Falling Path Sum","cn_name":"下降路径最小和","totalAC":"139.3K","totalSubmit":"205.2K","likes":409,"dislikes":0,"desc":"<p>给你一个 <code>n x n</code> 的<strong> 方形 </strong>整数数组&nbsp;<code>matrix</code> ，请你找出并返回通过 <code>matrix</code> 的<strong>下降路径</strong><em> </em>的<strong> </strong><strong>最小和</strong> 。</p>\n\n<p><strong>下降路径</strong> 可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置 <code>(row, col)</code> 的下一个元素应当是 <code>(row + 1, col - 1)</code>、<code>(row + 1, col)</code> 或者 <code>(row + 1, col + 1)</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode.cn/1729566253-aneDag-image.png\" style=\"height: 500px; width: 499px;\" /></p>\n\n<pre>\n<strong>输入：</strong>matrix = [[2,1,3],[6,5,4],[7,8,9]]\n<strong>输出：</strong>13\n<strong>解释：</strong>如图所示，为和最小的两条下降路径\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode.cn/1729566282-dtXwRd-image.png\" style=\"height: 365px; width: 164px;\" /></p>\n\n<pre>\n<strong>输入：</strong>matrix = [[-19,57],[-40,-5]]\n<strong>输出：</strong>-59\n<strong>解释：</strong>如图所示，为和最小的下降路径\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& matrix) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minFallingPathSum(int[][] matrix) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minFallingPathSum(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int minFallingPathSum(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinFallingPathSum(int[][] matrix) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar minFallingPathSum = function(matrix) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minFallingPathSum(matrix: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function minFallingPathSum($matrix) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minFallingPathSum(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minFallingPathSum(matrix: Array<IntArray>): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minFallingPathSum(List<List<int>> matrix) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minFallingPathSum(matrix [][]int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\n# @return {Integer}\ndef min_falling_path_sum(matrix)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minFallingPathSum(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_falling_path_sum(matrix: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-falling-path-sum matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_falling_path_sum(Matrix :: [[integer()]]) -> integer().\nmin_falling_path_sum(Matrix) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_falling_path_sum(matrix :: [[integer]]) :: integer\n  def min_falling_path_sum(matrix) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func minFallingPathSum(matrix: Array<Array<Int64>>): Int64 {\n\n    }\n}"}],"testcase":"[[2,1,3],[6,5,4],[7,8,9]]","testable":true,"templateMeta":{"name":"minFallingPathSum","params":[{"name":"matrix","type":"integer[][]"}],"return":{"type":"integer"}}}
{"id":150,"fid":"150","name":"逆波兰表达式求值","slug":"evaluate-reverse-polish-notation","link":"https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/","percent":56.92709590781599,"level":"Medium","category":"algorithms","en_name":"Evaluate Reverse Polish Notation","cn_name":"逆波兰表达式求值","totalAC":"512.3K","totalSubmit":"899.8K","likes":1039,"dislikes":0,"desc":"<p>给你一个字符串数组 <code>tokens</code> ，表示一个根据&nbsp;<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\" target=\"_blank\">逆波兰表示法</a> 表示的算术表达式。</p>\n\n<p>请你计算该表达式。返回一个表示表达式值的整数。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>有效的算符为 <code>'+'</code>、<code>'-'</code>、<code>'*'</code> 和 <code>'/'</code> 。</li>\n\t<li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li>\n\t<li>两个整数之间的除法总是 <strong>向零截断</strong> 。</li>\n\t<li>表达式中不含除零运算。</li>\n\t<li>输入是一个根据逆波兰表示法表示的算术表达式。</li>\n\t<li>答案及所有中间计算结果可以用 <strong>32 位</strong> 整数表示。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入：</strong>tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n<strong>输出：</strong>9\n<strong>解释：</strong>该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入：</strong>tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n<strong>输出：</strong>6\n<strong>解释：</strong>该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre>\n<strong>输入：</strong>tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n<strong>输出：</strong>22\n<strong>解释：</strong>该算式转化为常见的中缀算术表达式为：\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tokens[i]</code>&nbsp;是一个算符（<code>\"+\"</code>、<code>\"-\"</code>、<code>\"*\"</code> 或 <code>\"/\"</code>），或是在范围 <code>[-200, 200]</code> 内的一个整数</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>逆波兰表达式：</strong></p>\n\n<p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p>\n\n<ul>\n\t<li>平常使用的算式则是一种中缀表达式，如 <code>( 1 + 2 ) * ( 3 + 4 )</code> 。</li>\n\t<li>该算式的逆波兰表达式写法为 <code>( ( 1 2 + ) ( 3 4 + ) * )</code> 。</li>\n</ul>\n\n<p>逆波兰表达式主要有以下两个优点：</p>\n\n<ul>\n\t<li>去掉括号后表达式无歧义，上式即便写成 <code>1 2 + 3 4 + * </code>也可以依据次序计算出正确结果。</li>\n\t<li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int evalRPN(String[] tokens) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function(tokens) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function evalRPN(tokens: string[]): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int EvalRPN(string[] tokens) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int evalRPN(char** tokens, int tokensSize) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func evalRPN(tokens []string) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun evalRPN(tokens: Array<String>): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn eval_rpn(tokens: Vec<String>) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} tokens\n# @return {Integer}\ndef eval_rpn(tokens)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $tokens\n     * @return Integer\n     */\n    function evalRPN($tokens) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int evalRPN(List<String> tokens) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def evalRPN(tokens: Array[String]): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec eval_rpn(tokens :: [String.t]) :: integer\n  def eval_rpn(tokens) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec eval_rpn(Tokens :: [unicode:unicode_binary()]) -> integer().\neval_rpn(Tokens) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (eval-rpn tokens)\n  (-> (listof string?) exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func evalRPN(tokens: Array<String>): Int64 {\n\n    }\n}"}],"testcase":"[\"2\",\"1\",\"+\",\"3\",\"*\"]","testable":true,"templateMeta":{"name":"evalRPN","params":[{"name":"tokens","type":"string[]"}],"return":{"type":"integer"}}}
{"id":581,"fid":"581","name":"最短无序连续子数组","slug":"shortest-unsorted-continuous-subarray","link":"https://leetcode.cn/problems/shortest-unsorted-continuous-subarray/description/","percent":42.9403926243418,"level":"Medium","category":"algorithms","en_name":"Shortest Unsorted Continuous Subarray","cn_name":"最短无序连续子数组","totalAC":"226.3K","totalSubmit":"527K","likes":1233,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> ，你需要找出一个 <strong>连续子数组</strong> ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</p>\n\n<p>请你找出符合题意的 <strong>最短</strong> 子数组，并输出它的长度。</p>\n\n<p> </p>\n\n<div class=\"original__bRMd\">\n<div>\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,6,4,8,10,9,15]\n<strong>输出：</strong>5\n<strong>解释：</strong>你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1]\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> <= nums[i] <= 10<sup>5</sup></code></li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(n)</code> 的解决方案吗？</p>\n</div>\n</div>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findUnsortedSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUnsortedSubarray = function(nums) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findUnsortedSubarray(nums: number[]): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindUnsortedSubarray(int[] nums) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int findUnsortedSubarray(int* nums, int numsSize) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func findUnsortedSubarray(nums []int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findUnsortedSubarray(nums: IntArray): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findUnsortedSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_unsorted_subarray(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_unsorted_subarray(nums)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findUnsortedSubarray($nums) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findUnsortedSubarray(List<int> nums) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findUnsortedSubarray(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_unsorted_subarray(nums :: [integer]) :: integer\n  def find_unsorted_subarray(nums) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_unsorted_subarray(Nums :: [integer()]) -> integer().\nfind_unsorted_subarray(Nums) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-unsorted-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func findUnsortedSubarray(nums: Array<Int64>): Int64 {\n\n    }\n}"}],"testcase":"[2,6,4,8,10,9,15]","testable":true,"templateMeta":{"name":"findUnsortedSubarray","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}
{"id":100337,"fid":"LCR 184","name":"设计自助结算系统","slug":"dui-lie-de-zui-da-zhi-lcof","link":"https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/description/","percent":47.943947630639606,"level":"Medium","category":"algorithms","en_name":"设计自助结算系统","cn_name":"设计自助结算系统","totalAC":"190.1K","totalSubmit":"396.5K","likes":535,"dislikes":0,"desc":"<p>请设计一个自助结账系统，该系统需要通过一个队列来模拟顾客通过购物车的结算过程，需要实现的功能有：</p>\n\n<ul>\n\t<li><code>get_max()</code>：获取结算商品中的最高价格，如果队列为空，则返回 -1</li>\n\t<li><code>add(value)</code>：将价格为 <code>value</code> 的商品加入待结算商品队列的尾部</li>\n\t<li><code>remove()</code>：移除第一个待结算的商品价格，如果队列为空，则返回 -1</li>\n</ul>\n\n<p>注意，为保证该系统运转高效性，以上函数的均摊时间复杂度均为 O(1)</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n输入: \n[\"Checkout\",\"add\",\"add\",\"get_max\",\"remove\",\"get_max\"]\n[[],[4],[7],[],[],[]]\n\n输出: [null,null,null,7,4,7]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n输入: \n[\"Checkout\",\"remove\",\"get_max\"]\n[[],[],[]]\n\n输出: [null,-1,-1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= get_max, add, remove 的总操作数&nbsp;&lt;= 10000</code></li>\n\t<li><code>1 &lt;= value &lt;= 10^5</code></li>\n</ul>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Checkout {\npublic:\n    Checkout() {\n        \n    }\n    \n    int get_max() {\n        \n    }\n    \n    void add(int value) {\n        \n    }\n    \n    int remove() {\n        \n    }\n};\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * Checkout* obj = new Checkout();\n * int param_1 = obj->get_max();\n * obj->add(value);\n * int param_3 = obj->remove();\n */"},{"value":"java","text":"Java","defaultCode":"class Checkout {\n\n    public Checkout() {\n        \n    }\n    \n    public int get_max() {\n        \n    }\n    \n    public void add(int value) {\n        \n    }\n    \n    public int remove() {\n        \n    }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * Checkout obj = new Checkout();\n * int param_1 = obj.get_max();\n * obj.add(value);\n * int param_3 = obj.remove();\n */"},{"value":"python3","text":"Python3","defaultCode":"class Checkout:\n\n    def __init__(self):\n        \n\n    def get_max(self) -> int:\n        \n\n    def add(self, value: int) -> None:\n        \n\n    def remove(self) -> int:\n        \n\n\n# Your Checkout object will be instantiated and called as such:\n# obj = Checkout()\n# param_1 = obj.get_max()\n# obj.add(value)\n# param_3 = obj.remove()"},{"value":"python","text":"Python","defaultCode":"class Checkout(object):\n\n    def __init__(self):\n        \n\n    def get_max(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def add(self, value):\n        \"\"\"\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n    def remove(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Checkout object will be instantiated and called as such:\n# obj = Checkout()\n# param_1 = obj.get_max()\n# obj.add(value)\n# param_3 = obj.remove()"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar Checkout = function() {\n    \n};\n\n/**\n * @return {number}\n */\nCheckout.prototype.get_max = function() {\n    \n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nCheckout.prototype.add = function(value) {\n    \n};\n\n/**\n * @return {number}\n */\nCheckout.prototype.remove = function() {\n    \n};\n\n/** \n * Your Checkout object will be instantiated and called as such:\n * var obj = new Checkout()\n * var param_1 = obj.get_max()\n * obj.add(value)\n * var param_3 = obj.remove()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class Checkout {\n    constructor() {\n        \n    }\n\n    get_max(): number {\n        \n    }\n\n    add(value: number): void {\n        \n    }\n\n    remove(): number {\n        \n    }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * var obj = new Checkout()\n * var param_1 = obj.get_max()\n * obj.add(value)\n * var param_3 = obj.remove()\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Checkout {\n\n    public Checkout() {\n        \n    }\n    \n    public int Get_max() {\n        \n    }\n    \n    public void Add(int value) {\n        \n    }\n    \n    public int Remove() {\n        \n    }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * Checkout obj = new Checkout();\n * int param_1 = obj.Get_max();\n * obj.Add(value);\n * int param_3 = obj.Remove();\n */"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} Checkout;\n\n\nCheckout* checkoutCreate() {\n    \n}\n\nint checkoutGet_max(Checkout* obj) {\n    \n}\n\nvoid checkoutAdd(Checkout* obj, int value) {\n    \n}\n\nint checkoutRemove(Checkout* obj) {\n    \n}\n\nvoid checkoutFree(Checkout* obj) {\n    \n}\n\n/**\n * Your Checkout struct will be instantiated and called as such:\n * Checkout* obj = checkoutCreate();\n * int param_1 = checkoutGet_max(obj);\n \n * checkoutAdd(obj, value);\n \n * int param_3 = checkoutRemove(obj);\n \n * checkoutFree(obj);\n*/"},{"value":"golang","text":"Go","defaultCode":"type Checkout struct {\n    \n}\n\n\nfunc Constructor() Checkout {\n    \n}\n\n\nfunc (this *Checkout) Get_max() int {\n    \n}\n\n\nfunc (this *Checkout) Add(value int)  {\n    \n}\n\n\nfunc (this *Checkout) Remove() int {\n    \n}\n\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Get_max();\n * obj.Add(value);\n * param_3 := obj.Remove();\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Checkout() {\n\n    fun get_max(): Int {\n        \n    }\n\n    fun add(value: Int) {\n        \n    }\n\n    fun remove(): Int {\n        \n    }\n\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * var obj = Checkout()\n * var param_1 = obj.get_max()\n * obj.add(value)\n * var param_3 = obj.remove()\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass Checkout {\n\n    init() {\n        \n    }\n    \n    func get_max() -> Int {\n        \n    }\n    \n    func add(_ value: Int) {\n        \n    }\n    \n    func remove() -> Int {\n        \n    }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * let obj = Checkout()\n * let ret_1: Int = obj.get_max()\n * obj.add(value)\n * let ret_3: Int = obj.remove()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct Checkout {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Checkout {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn get_max(&self) -> i32 {\n        \n    }\n    \n    fn add(&self, value: i32) {\n        \n    }\n    \n    fn remove(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * let obj = Checkout::new();\n * let ret_1: i32 = obj.get_max();\n * obj.add(value);\n * let ret_3: i32 = obj.remove();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Checkout\n    def initialize()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_max()\n        \n    end\n\n\n=begin\n    :type value: Integer\n    :rtype: Void\n=end\n    def add(value)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def remove()\n        \n    end\n\n\nend\n\n# Your Checkout object will be instantiated and called as such:\n# obj = Checkout.new()\n# param_1 = obj.get_max()\n# obj.add(value)\n# param_3 = obj.remove()"},{"value":"php","text":"PHP","defaultCode":"class Checkout {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function get_max() {\n        \n    }\n  \n    /**\n     * @param Integer $value\n     * @return NULL\n     */\n    function add($value) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function remove() {\n        \n    }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * $obj = Checkout();\n * $ret_1 = $obj->get_max();\n * $obj->add($value);\n * $ret_3 = $obj->remove();\n */"},{"value":"dart","text":"Dart","defaultCode":"class Checkout {\n\n  Checkout() {\n    \n  }\n  \n  int get_max() {\n    \n  }\n  \n  void add(int value) {\n    \n  }\n  \n  int remove() {\n    \n  }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * Checkout obj = Checkout();\n * int param1 = obj.get_max();\n * obj.add(value);\n * int param3 = obj.remove();\n */"},{"value":"scala","text":"Scala","defaultCode":"class Checkout() {\n\n    def get_max(): Int = {\n        \n    }\n\n    def add(value: Int): Unit = {\n        \n    }\n\n    def remove(): Int = {\n        \n    }\n\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * val obj = new Checkout()\n * val param_1 = obj.get_max()\n * obj.add(value)\n * val param_3 = obj.remove()\n */"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Checkout do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec get_max() :: integer\n  def get_max() do\n    \n  end\n\n  @spec add(value :: integer) :: any\n  def add(value) do\n    \n  end\n\n  @spec remove() :: integer\n  def remove() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Checkout.init_()\n# param_1 = Checkout.get_max()\n# Checkout.add(value)\n# param_3 = Checkout.remove()\n\n# Checkout.init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"erlang","text":"Erlang","defaultCode":"-spec checkout_init_() -> any().\ncheckout_init_() ->\n  .\n\n-spec checkout_get_max() -> integer().\ncheckout_get_max() ->\n  .\n\n-spec checkout_add(Value :: integer()) -> any().\ncheckout_add(Value) ->\n  .\n\n-spec checkout_remove() -> integer().\ncheckout_remove() ->\n  .\n\n\n%% Your functions will be called as such:\n%% checkout_init_(),\n%% Param_1 = checkout_get_max(),\n%% checkout_add(Value),\n%% Param_3 = checkout_remove(),\n\n%% checkout_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"racket","text":"Racket","defaultCode":"(define checkout%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; get_max : -> exact-integer?\n    (define/public (get_max)\n      )\n    ; add : exact-integer? -> void?\n    (define/public (add value)\n      )\n    ; remove : -> exact-integer?\n    (define/public (remove)\n      )))\n\n;; Your checkout% object will be instantiated and called as such:\n;; (define obj (new checkout%))\n;; (define param_1 (send obj get_max))\n;; (send obj add value)\n;; (define param_3 (send obj remove))"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Checkout {\n    init() {\n\n    }\n    \n    func get_max(): Int64 {\n\n    }\n    \n    func add(value: Int64): Unit {\n\n    }\n    \n    func remove(): Int64 {\n\n    }\n}\n\n/**\n * Your Checkout object will be instantiated and called as such:\n * let obj: Checkout = Checkout()\n * let param_1 = obj.get_max()\n * obj.add(value)\n * let param_3 = obj.remove()\n */"}],"testcase":"[\"Checkout\",\"add\",\"add\",\"get_max\",\"remove\",\"get_max\"]\n[[],[4],[7],[],[],[]]","testable":true,"templateMeta":{"classname":"Checkout","maxbytesperline":200000,"constructor":{"params":[]},"methods":[{"name":"get_max","params":[],"return":{"type":"integer"}},{"name":"add","params":[{"type":"integer","name":"value"}],"return":{"type":"void"}},{"name":"remove","params":[],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}
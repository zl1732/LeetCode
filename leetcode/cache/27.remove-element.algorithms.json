{"id":27,"fid":"27","name":"移除元素","slug":"remove-element","link":"https://leetcode.cn/problems/remove-element/description/","percent":60.39602993330417,"level":"Easy","category":"algorithms","en_name":"Remove Element","cn_name":"移除元素","totalAC":"2M","totalSubmit":"3.4M","likes":2594,"dislikes":0,"desc":"<p>给你一个数组 <code>nums</code><em>&nbsp;</em>和一个值 <code>val</code>，你需要 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong> 移除所有数值等于&nbsp;<code>val</code><em>&nbsp;</em>的元素。元素的顺序可能发生改变。然后返回&nbsp;<code>nums</code>&nbsp;中与&nbsp;<code>val</code>&nbsp;不同的元素的数量。</p>\n\n<p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p>\n\n<ul>\n\t<li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li>\n\t<li>返回 <code>k</code>。</li>\n</ul>\n\n<p><strong>用户评测：</strong></p>\n\n<p>评测机将使用以下代码测试您的解决方案：</p>\n\n<pre>\nint[] nums = [...]; // 输入数组\nint val = ...; // 要移除的值\nint[] expectedNums = [...]; // 长度正确的预期答案。\n                            // 它以不等于 val 的值排序。\n\nint k = removeElement(nums, val); // 调用你的实现\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // 排序 nums 的前 k 个元素\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}</pre>\n\n<p>如果所有的断言都通过，你的解决方案将会 <strong>通过</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,2,2,3], val = 3\n<strong>输出：</strong>2, nums = [2,2,_,_]\n<strong>解释：</strong>你的函数函数应该返回 k = 2, 并且 nums<em> </em>中的前两个元素均为 2。\n你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [0,1,2,2,3,0,4,2], val = 2\n<strong>输出：</strong>5, nums = [0,1,4,0,3,_,_,_]\n<strong>解释：</strong>你的函数应该返回 k = 5，并且 nums 中的前五个元素为 0,0,1,3,4。\n注意这五个元素可以任意顺序返回。\n你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int removeElement(int[] nums, int val) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int removeElement(int* nums, int numsSize, int val) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int RemoveElement(int[] nums, int val) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function(nums, val) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function removeElement(nums: number[], val: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $val\n     * @return Integer\n     */\n    function removeElement(&$nums, $val) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func removeElement(_ nums: inout [Int], _ val: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun removeElement(nums: IntArray, `val`: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int removeElement(List<int> nums, int val) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func removeElement(nums []int, val int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} val\n# @return {Integer}\ndef remove_element(nums, val)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def removeElement(nums: Array[Int], `val`: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn remove_element(nums: &mut Vec<i32>, val: i32) -> i32 {\n        \n    }\n}"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func removeElement(nums: Array<Int64>, val: Int64): Int64 {\n\n    }\n}"}],"testcase":"[3,2,2,3]\n3","testable":true,"templateMeta":{"name":"removeElement","params":[{"name":"nums","type":"integer[]"},{"name":"val","type":"integer"}],"return":{"type":"integer"},"output":{"paramindex":0,"size":"ret"}}}
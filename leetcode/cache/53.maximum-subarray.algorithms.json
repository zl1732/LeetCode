{"id":53,"fid":"53","name":"最大子数组和","slug":"maximum-subarray","link":"https://leetcode.cn/problems/maximum-subarray/description/","percent":56.20472179534831,"level":"Medium","category":"algorithms","en_name":"Maximum Subarray","cn_name":"最大子数组和","totalAC":"2.2M","totalSubmit":"3.9M","likes":7085,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n\n<p><strong><span data-keyword=\"subarray-nonempty\">子数组 </span></strong>是数组中的一个连续部分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>输出：</strong>6\n<strong>解释：</strong>连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1]\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [5,4,-1,7,8]\n<strong>输出：</strong>23\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int maxSubArray(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxSubArray(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxSubArray(nums: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubArray($nums) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxSubArray(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxSubArray(nums: IntArray): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxSubArray(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxSubArray(nums []int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef max_sub_array(nums)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-sub-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_sub_array(Nums :: [integer()]) -> integer().\nmax_sub_array(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_sub_array(nums :: [integer]) :: integer\n  def max_sub_array(nums) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func maxSubArray(nums: Array<Int64>): Int64 {\n\n    }\n}"}],"testcase":"[-2,1,-3,4,-1,2,1,-5,4]","testable":true,"templateMeta":{"name":"maxSubArray","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}
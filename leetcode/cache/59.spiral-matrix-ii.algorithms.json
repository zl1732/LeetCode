{"id":59,"fid":"59","name":"螺旋矩阵 II","slug":"spiral-matrix-ii","link":"https://leetcode.cn/problems/spiral-matrix-ii/description/","percent":70.2610205916109,"level":"Medium","category":"algorithms","en_name":"Spiral Matrix II","cn_name":"螺旋矩阵 II","totalAC":"576.3K","totalSubmit":"820.3K","likes":1493,"dislikes":0,"desc":"<p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n<sup>2</sup></code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>输入：</strong>n = 3\n<strong>输出：</strong>[[1,2,3],[8,9,4],[7,6,5]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 1\n<strong>输出：</strong>[[1]]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 20</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[][] generateMatrix(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generateMatrix(int n, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[][] GenerateMatrix(int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number[][]}\n */\nvar generateMatrix = function(n) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function generateMatrix(n: number): number[][] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function generateMatrix($n) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generateMatrix(_ n: Int) -> [[Int]] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun generateMatrix(n: Int): Array<IntArray> {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<int>> generateMatrix(int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func generateMatrix(n int) [][]int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer[][]}\ndef generate_matrix(n)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def generateMatrix(n: Int): Array[Array[Int]] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn generate_matrix(n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (generate-matrix n)\n  (-> exact-integer? (listof (listof exact-integer?)))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec generate_matrix(N :: integer()) -> [[integer()]].\ngenerate_matrix(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec generate_matrix(n :: integer) :: [[integer]]\n  def generate_matrix(n) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func generateMatrix(n: Int64): Array<Array<Int64>> {\n\n    }\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"generateMatrix","params":[{"name":"n","type":"integer"}],"return":{"type":"integer[][]","rowsize":"param_1","colsize":"param_1","dealloc":true}}}
{"id":860,"fid":"622","name":"设计循环队列","slug":"design-circular-queue","link":"https://leetcode.cn/problems/design-circular-queue/description/","percent":47.004864062831196,"level":"Medium","category":"algorithms","en_name":"Design Circular Queue","cn_name":"设计循环队列","totalAC":"168.5K","totalSubmit":"358.5K","likes":571,"dislikes":0,"desc":"<p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为&ldquo;环形缓冲器&rdquo;。</p>\n\n<p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p>\n\n<p>你的实现应该支持如下操作：</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</li>\n\t<li><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</li>\n\t<li><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</li>\n\t<li><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</li>\n\t<li><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</li>\n\t<li><code>isEmpty()</code>: 检查循环队列是否为空。</li>\n\t<li><code>isFull()</code>: 检查循环队列是否已满。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyCircularQueue circularQueue = new MyCircularQueue(3); // 设置长度为 3\ncircularQueue.enQueue(1); &nbsp;// 返回 true\ncircularQueue.enQueue(2); &nbsp;// 返回 true\ncircularQueue.enQueue(3); &nbsp;// 返回 true\ncircularQueue.enQueue(4); &nbsp;// 返回 false，队列已满\ncircularQueue.Rear(); &nbsp;// 返回 3\ncircularQueue.isFull(); &nbsp;// 返回 true\ncircularQueue.deQueue(); &nbsp;// 返回 true\ncircularQueue.enQueue(4); &nbsp;// 返回 true\ncircularQueue.Rear(); &nbsp;// 返回 4</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有的值都在 0&nbsp;至 1000 的范围内；</li>\n\t<li>操作数将在 1 至 1000 的范围内；</li>\n\t<li>请不要使用内置的队列库。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyCircularQueue {\npublic:\n    MyCircularQueue(int k) {\n        \n    }\n    \n    bool enQueue(int value) {\n        \n    }\n    \n    bool deQueue() {\n        \n    }\n    \n    int Front() {\n        \n    }\n    \n    int Rear() {\n        \n    }\n    \n    bool isEmpty() {\n        \n    }\n    \n    bool isFull() {\n        \n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */"},{"value":"java","text":"Java","defaultCode":"class MyCircularQueue {\n\n    public MyCircularQueue(int k) {\n        \n    }\n    \n    public boolean enQueue(int value) {\n        \n    }\n    \n    public boolean deQueue() {\n        \n    }\n    \n    public int Front() {\n        \n    }\n    \n    public int Rear() {\n        \n    }\n    \n    public boolean isEmpty() {\n        \n    }\n    \n    public boolean isFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * boolean param_1 = obj.enQueue(value);\n * boolean param_2 = obj.deQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * boolean param_5 = obj.isEmpty();\n * boolean param_6 = obj.isFull();\n */"},{"value":"python3","text":"Python3","defaultCode":"class MyCircularQueue:\n\n    def __init__(self, k: int):\n        \n\n    def enQueue(self, value: int) -> bool:\n        \n\n    def deQueue(self) -> bool:\n        \n\n    def Front(self) -> int:\n        \n\n    def Rear(self) -> int:\n        \n\n    def isEmpty(self) -> bool:\n        \n\n    def isFull(self) -> bool:\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()"},{"value":"python","text":"Python","defaultCode":"class MyCircularQueue(object):\n\n    def __init__(self, k):\n        \"\"\"\n        :type k: int\n        \"\"\"\n        \n\n    def enQueue(self, value):\n        \"\"\"\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def deQueue(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n    def Front(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def Rear(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def isEmpty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n    def isFull(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} k\n */\nvar MyCircularQueue = function(k) {\n    \n};\n\n/** \n * @param {number} value\n * @return {boolean}\n */\nMyCircularQueue.prototype.enQueue = function(value) {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.deQueue = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyCircularQueue.prototype.Front = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyCircularQueue.prototype.Rear = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.isEmpty = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.isFull = function() {\n    \n};\n\n/** \n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class MyCircularQueue {\n    constructor(k: number) {\n        \n    }\n\n    enQueue(value: number): boolean {\n        \n    }\n\n    deQueue(): boolean {\n        \n    }\n\n    Front(): number {\n        \n    }\n\n    Rear(): number {\n        \n    }\n\n    isEmpty(): boolean {\n        \n    }\n\n    isFull(): boolean {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyCircularQueue {\n\n    public MyCircularQueue(int k) {\n        \n    }\n    \n    public bool EnQueue(int value) {\n        \n    }\n    \n    public bool DeQueue() {\n        \n    }\n    \n    public int Front() {\n        \n    }\n    \n    public int Rear() {\n        \n    }\n    \n    public bool IsEmpty() {\n        \n    }\n    \n    public bool IsFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * bool param_1 = obj.EnQueue(value);\n * bool param_2 = obj.DeQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * bool param_5 = obj.IsEmpty();\n * bool param_6 = obj.IsFull();\n */"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} MyCircularQueue;\n\n\nMyCircularQueue* myCircularQueueCreate(int k) {\n    \n}\n\nbool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {\n    \n}\n\nbool myCircularQueueDeQueue(MyCircularQueue* obj) {\n    \n}\n\nint myCircularQueueFront(MyCircularQueue* obj) {\n    \n}\n\nint myCircularQueueRear(MyCircularQueue* obj) {\n    \n}\n\nbool myCircularQueueIsEmpty(MyCircularQueue* obj) {\n    \n}\n\nbool myCircularQueueIsFull(MyCircularQueue* obj) {\n    \n}\n\nvoid myCircularQueueFree(MyCircularQueue* obj) {\n    \n}\n\n/**\n * Your MyCircularQueue struct will be instantiated and called as such:\n * MyCircularQueue* obj = myCircularQueueCreate(k);\n * bool param_1 = myCircularQueueEnQueue(obj, value);\n \n * bool param_2 = myCircularQueueDeQueue(obj);\n \n * int param_3 = myCircularQueueFront(obj);\n \n * int param_4 = myCircularQueueRear(obj);\n \n * bool param_5 = myCircularQueueIsEmpty(obj);\n \n * bool param_6 = myCircularQueueIsFull(obj);\n \n * myCircularQueueFree(obj);\n*/"},{"value":"golang","text":"Go","defaultCode":"type MyCircularQueue struct {\n    \n}\n\n\nfunc Constructor(k int) MyCircularQueue {\n    \n}\n\n\nfunc (this *MyCircularQueue) EnQueue(value int) bool {\n    \n}\n\n\nfunc (this *MyCircularQueue) DeQueue() bool {\n    \n}\n\n\nfunc (this *MyCircularQueue) Front() int {\n    \n}\n\n\nfunc (this *MyCircularQueue) Rear() int {\n    \n}\n\n\nfunc (this *MyCircularQueue) IsEmpty() bool {\n    \n}\n\n\nfunc (this *MyCircularQueue) IsFull() bool {\n    \n}\n\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * obj := Constructor(k);\n * param_1 := obj.EnQueue(value);\n * param_2 := obj.DeQueue();\n * param_3 := obj.Front();\n * param_4 := obj.Rear();\n * param_5 := obj.IsEmpty();\n * param_6 := obj.IsFull();\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyCircularQueue(k: Int) {\n\n    fun enQueue(value: Int): Boolean {\n        \n    }\n\n    fun deQueue(): Boolean {\n        \n    }\n\n    fun Front(): Int {\n        \n    }\n\n    fun Rear(): Int {\n        \n    }\n\n    fun isEmpty(): Boolean {\n        \n    }\n\n    fun isFull(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyCircularQueue {\n\n    init(_ k: Int) {\n        \n    }\n    \n    func enQueue(_ value: Int) -> Bool {\n        \n    }\n    \n    func deQueue() -> Bool {\n        \n    }\n    \n    func Front() -> Int {\n        \n    }\n    \n    func Rear() -> Int {\n        \n    }\n    \n    func isEmpty() -> Bool {\n        \n    }\n    \n    func isFull() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * let obj = MyCircularQueue(k)\n * let ret_1: Bool = obj.enQueue(value)\n * let ret_2: Bool = obj.deQueue()\n * let ret_3: Int = obj.Front()\n * let ret_4: Int = obj.Rear()\n * let ret_5: Bool = obj.isEmpty()\n * let ret_6: Bool = obj.isFull()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct MyCircularQueue {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCircularQueue {\n\n    fn new(k: i32) -> Self {\n        \n    }\n    \n    fn en_queue(&self, value: i32) -> bool {\n        \n    }\n    \n    fn de_queue(&self) -> bool {\n        \n    }\n    \n    fn front(&self) -> i32 {\n        \n    }\n    \n    fn rear(&self) -> i32 {\n        \n    }\n    \n    fn is_empty(&self) -> bool {\n        \n    }\n    \n    fn is_full(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * let obj = MyCircularQueue::new(k);\n * let ret_1: bool = obj.en_queue(value);\n * let ret_2: bool = obj.de_queue();\n * let ret_3: i32 = obj.front();\n * let ret_4: i32 = obj.rear();\n * let ret_5: bool = obj.is_empty();\n * let ret_6: bool = obj.is_full();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyCircularQueue\n\n=begin\n    :type k: Integer\n=end\n    def initialize(k)\n        \n    end\n\n\n=begin\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def en_queue(value)\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def de_queue()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def front()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def rear()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def is_empty()\n        \n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def is_full()\n        \n    end\n\n\nend\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue.new(k)\n# param_1 = obj.en_queue(value)\n# param_2 = obj.de_queue()\n# param_3 = obj.front()\n# param_4 = obj.rear()\n# param_5 = obj.is_empty()\n# param_6 = obj.is_full()"},{"value":"php","text":"PHP","defaultCode":"class MyCircularQueue {\n    /**\n     * @param Integer $k\n     */\n    function __construct($k) {\n        \n    }\n  \n    /**\n     * @param Integer $value\n     * @return Boolean\n     */\n    function enQueue($value) {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function deQueue() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function Front() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function Rear() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function isEmpty() {\n        \n    }\n  \n    /**\n     * @return Boolean\n     */\n    function isFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * $obj = MyCircularQueue($k);\n * $ret_1 = $obj->enQueue($value);\n * $ret_2 = $obj->deQueue();\n * $ret_3 = $obj->Front();\n * $ret_4 = $obj->Rear();\n * $ret_5 = $obj->isEmpty();\n * $ret_6 = $obj->isFull();\n */"},{"value":"dart","text":"Dart","defaultCode":"class MyCircularQueue {\n\n  MyCircularQueue(int k) {\n    \n  }\n  \n  bool enQueue(int value) {\n    \n  }\n  \n  bool deQueue() {\n    \n  }\n  \n  int Front() {\n    \n  }\n  \n  int Rear() {\n    \n  }\n  \n  bool isEmpty() {\n    \n  }\n  \n  bool isFull() {\n    \n  }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = MyCircularQueue(k);\n * bool param1 = obj.enQueue(value);\n * bool param2 = obj.deQueue();\n * int param3 = obj.Front();\n * int param4 = obj.Rear();\n * bool param5 = obj.isEmpty();\n * bool param6 = obj.isFull();\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyCircularQueue(_k: Int) {\n\n    def enQueue(value: Int): Boolean = {\n        \n    }\n\n    def deQueue(): Boolean = {\n        \n    }\n\n    def Front(): Int = {\n        \n    }\n\n    def Rear(): Int = {\n        \n    }\n\n    def isEmpty(): Boolean = {\n        \n    }\n\n    def isFull(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * val obj = new MyCircularQueue(k)\n * val param_1 = obj.enQueue(value)\n * val param_2 = obj.deQueue()\n * val param_3 = obj.Front()\n * val param_4 = obj.Rear()\n * val param_5 = obj.isEmpty()\n * val param_6 = obj.isFull()\n */"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule MyCircularQueue do\n  @spec init_(k :: integer) :: any\n  def init_(k) do\n    \n  end\n\n  @spec en_queue(value :: integer) :: boolean\n  def en_queue(value) do\n    \n  end\n\n  @spec de_queue() :: boolean\n  def de_queue() do\n    \n  end\n\n  @spec front() :: integer\n  def front() do\n    \n  end\n\n  @spec rear() :: integer\n  def rear() do\n    \n  end\n\n  @spec is_empty() :: boolean\n  def is_empty() do\n    \n  end\n\n  @spec is_full() :: boolean\n  def is_full() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MyCircularQueue.init_(k)\n# param_1 = MyCircularQueue.en_queue(value)\n# param_2 = MyCircularQueue.de_queue()\n# param_3 = MyCircularQueue.front()\n# param_4 = MyCircularQueue.rear()\n# param_5 = MyCircularQueue.is_empty()\n# param_6 = MyCircularQueue.is_full()\n\n# MyCircularQueue.init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_circular_queue_init_(K :: integer()) -> any().\nmy_circular_queue_init_(K) ->\n  .\n\n-spec my_circular_queue_en_queue(Value :: integer()) -> boolean().\nmy_circular_queue_en_queue(Value) ->\n  .\n\n-spec my_circular_queue_de_queue() -> boolean().\nmy_circular_queue_de_queue() ->\n  .\n\n-spec my_circular_queue_front() -> integer().\nmy_circular_queue_front() ->\n  .\n\n-spec my_circular_queue_rear() -> integer().\nmy_circular_queue_rear() ->\n  .\n\n-spec my_circular_queue_is_empty() -> boolean().\nmy_circular_queue_is_empty() ->\n  .\n\n-spec my_circular_queue_is_full() -> boolean().\nmy_circular_queue_is_full() ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_circular_queue_init_(K),\n%% Param_1 = my_circular_queue_en_queue(Value),\n%% Param_2 = my_circular_queue_de_queue(),\n%% Param_3 = my_circular_queue_front(),\n%% Param_4 = my_circular_queue_rear(),\n%% Param_5 = my_circular_queue_is_empty(),\n%% Param_6 = my_circular_queue_is_full(),\n\n%% my_circular_queue_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"racket","text":"Racket","defaultCode":"(define my-circular-queue%\n  (class object%\n    (super-new)\n    \n    ; k : exact-integer?\n    (init-field\n      k)\n    \n    ; en-queue : exact-integer? -> boolean?\n    (define/public (en-queue value)\n      )\n    ; de-queue : -> boolean?\n    (define/public (de-queue)\n      )\n    ; front : -> exact-integer?\n    (define/public (front)\n      )\n    ; rear : -> exact-integer?\n    (define/public (rear)\n      )\n    ; is-empty : -> boolean?\n    (define/public (is-empty)\n      )\n    ; is-full : -> boolean?\n    (define/public (is-full)\n      )))\n\n;; Your my-circular-queue% object will be instantiated and called as such:\n;; (define obj (new my-circular-queue% [k k]))\n;; (define param_1 (send obj en-queue value))\n;; (define param_2 (send obj de-queue))\n;; (define param_3 (send obj front))\n;; (define param_4 (send obj rear))\n;; (define param_5 (send obj is-empty))\n;; (define param_6 (send obj is-full))"},{"value":"cangjie","text":"Cangjie","defaultCode":"class MyCircularQueue {\n    init(k: Int64) {\n\n    }\n    \n    func enQueue(value: Int64): Bool {\n\n    }\n    \n    func deQueue(): Bool {\n\n    }\n    \n    func Front(): Int64 {\n\n    }\n    \n    func Rear(): Int64 {\n\n    }\n    \n    func isEmpty(): Bool {\n\n    }\n    \n    func isFull(): Bool {\n\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * let obj: MyCircularQueue = MyCircularQueue(k)\n * let param_1 = obj.enQueue(value)\n * let param_2 = obj.deQueue()\n * let param_3 = obj.Front()\n * let param_4 = obj.Rear()\n * let param_5 = obj.isEmpty()\n * let param_6 = obj.isFull()\n */"}],"testcase":"[\"MyCircularQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"Rear\",\"isFull\",\"deQueue\",\"enQueue\",\"Rear\"]\n[[3],[1],[2],[3],[4],[],[],[],[4],[]]","testable":true,"templateMeta":{"classname":"MyCircularQueue","constructor":{"params":[{"type":"integer","name":"k"}]},"methods":[{"params":[{"type":"integer","name":"value"}],"name":"enQueue","return":{"type":"boolean"}},{"params":[],"name":"deQueue","return":{"type":"boolean"}},{"params":[],"name":"Front","return":{"type":"integer"}},{"params":[],"name":"Rear","return":{"type":"integer"}},{"params":[],"name":"isEmpty","return":{"type":"boolean"}},{"params":[],"name":"isFull","return":{"type":"boolean"}}],"return":{"type":"boolean"},"systemdesign":true}}
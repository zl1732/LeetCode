{"id":140,"fid":"140","name":"单词拆分 II","slug":"word-break-ii","link":"https://leetcode.cn/problems/word-break-ii/description/","percent":60.560715140178786,"level":"Hard","category":"algorithms","en_name":"Word Break II","cn_name":"单词拆分 II","totalAC":"111.4K","totalSubmit":"184K","likes":790,"dislikes":0,"desc":"<p>给定一个字符串 <code>s</code> 和一个字符串字典<meta charset=\"UTF-8\" />&nbsp;<code>wordDict</code>&nbsp;，在字符串<meta charset=\"UTF-8\" />&nbsp;<code>s</code>&nbsp;中增加空格来构建一个句子，使得句子中所有的单词都在词典中。<strong>以任意顺序</strong> 返回所有这些可能的句子。</p>\n\n<p><strong>注意：</strong>词典中的同一个单词可能在分段中被重复使用多次。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong>s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n<strong>输出:</strong>[\"cats and dog\",\"cat sand dog\"]\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong>s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n<strong>输出:</strong>[\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n<strong>解释:</strong> 注意你可以重复使用字典中的单词。\n</pre>\n\n<p><strong class=\"example\">示例&nbsp;3：</strong></p>\n\n<pre>\n<strong>输入:</strong>s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n<strong>输出:</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<p><meta charset=\"UTF-8\" /></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li>\n\t<li><code>s</code>&nbsp;和&nbsp;<code>wordDict[i]</code>&nbsp;仅有小写英文字母组成</li>\n\t<li><code>wordDict</code>&nbsp;中所有字符串都 <strong>不同</strong></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** wordBreak(char* s, char** wordDict, int wordDictSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> WordBreak(string s, IList<string> wordDict) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function wordBreak(s: string, wordDict: string[]): string[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $wordDict\n     * @return String[]\n     */\n    function wordBreak($s, $wordDict) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> [String] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun wordBreak(s: String, wordDict: List<String>): List<String> {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> wordBreak(String s, List<String> wordDict) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordBreak(s string, wordDict []string) []string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {String[]} word_dict\n# @return {String[]}\ndef word_break(s, word_dict)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn word_break(s: String, word_dict: Vec<String>) -> Vec<String> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (word-break s wordDict)\n  (-> string? (listof string?) (listof string?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nword_break(S, WordDict) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: [String.t]\n  def word_break(s, word_dict) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func wordBreak(s: String, wordDict: ArrayList<String>): ArrayList<String> {\n\n    }\n}"}],"testcase":"\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]","testable":true,"templateMeta":{"name":"wordBreak","params":[{"name":"s","type":"string"},{"name":"wordDict","type":"list<string>"}],"return":{"type":"list<string>","dealloc":true}}}
{"id":892,"fid":"862","name":"和至少为 K 的最短子数组","slug":"shortest-subarray-with-sum-at-least-k","link":"https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/description/","percent":28.420790549917697,"level":"Hard","category":"algorithms","en_name":"Shortest Subarray with Sum at Least K","cn_name":"和至少为 K 的最短子数组","totalAC":"61.9K","totalSubmit":"217.4K","likes":793,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，找出 <code>nums</code> 中和至少为 <code>k</code> 的 <strong>最短非空子数组</strong> ，并返回该子数组的长度。如果不存在这样的 <strong>子数组</strong> ，返回 <code>-1</code> 。</p>\n\n<p><strong>子数组</strong> 是数组中 <strong>连续</strong> 的一部分。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1], k = 1\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2], k = 4\n<strong>输出：</strong>-1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,-1,2], k = 3\n<strong>输出：</strong>3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int shortestSubarray(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int shortestSubarray(int[] nums, int k) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def shortestSubarray(self, nums: List[int], k: int) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def shortestSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar shortestSubarray = function(nums, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function shortestSubarray(nums: number[], k: number): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ShortestSubarray(int[] nums, int k) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int shortestSubarray(int* nums, int numsSize, int k) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func shortestSubarray(nums []int, k int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun shortestSubarray(nums: IntArray, k: Int): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shortestSubarray(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn shortest_subarray(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef shortest_subarray(nums, k)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function shortestSubarray($nums, $k) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int shortestSubarray(List<int> nums, int k) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def shortestSubarray(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec shortest_subarray(nums :: [integer], k :: integer) :: integer\n  def shortest_subarray(nums, k) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec shortest_subarray(Nums :: [integer()], K :: integer()) -> integer().\nshortest_subarray(Nums, K) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (shortest-subarray nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func shortestSubarray(nums: Array<Int64>, k: Int64): Int64 {\n\n    }\n}"}],"testcase":"[1]\n1","testable":true,"templateMeta":{"name":"shortestSubarray","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}
{"id":100329,"fid":"LCR 172","name":"统计目标成绩的出现次数","slug":"zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof","link":"https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description/","percent":52.677450642971124,"level":"Easy","category":"algorithms","en_name":"统计目标成绩的出现次数","cn_name":"统计目标成绩的出现次数","totalAC":"421K","totalSubmit":"799.3K","likes":463,"dislikes":0,"desc":"<p>某班级考试成绩按非严格递增顺序记录于整数数组 <code>scores</code>，请返回目标成绩 <code>target</code> 的出现次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> scores = [2, 2, 3, 4, 4, 4, 5, 6, 6, 8], target = 4\n<strong>输出:</strong> 3</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入:</strong> scores = [1, 2, 3, 5, 7, 9], target = 6\n<strong>输出:</strong> 0</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= scores.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= scores[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>scores</code>&nbsp;是一个非递减数组</li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong>本题与主站 34 题相同（仅返回值不同）：<a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p>\n\n<p>&nbsp;</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int countTarget(vector<int>& scores, int target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int countTarget(int[] scores, int target) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countTarget(self, scores: List[int], target: int) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def countTarget(self, scores, target):\n        \"\"\"\n        :type scores: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} scores\n * @param {number} target\n * @return {number}\n */\nvar countTarget = function(scores, target) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function countTarget(scores: number[], target: number): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CountTarget(int[] scores, int target) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int countTarget(int* scores, int scoresSize, int target) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func countTarget(scores []int, target int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countTarget(scores: IntArray, target: Int): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countTarget(_ scores: [Int], _ target: Int) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn count_target(scores: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} scores\n# @param {Integer} target\n# @return {Integer}\ndef count_target(scores, target)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $scores\n     * @param Integer $target\n     * @return Integer\n     */\n    function countTarget($scores, $target) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int countTarget(List<int> scores, int target) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countTarget(scores: Array[Int], target: Int): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec count_target(scores :: [integer], target :: integer) :: integer\n  def count_target(scores, target) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec count_target(Scores :: [integer()], Target :: integer()) -> integer().\ncount_target(Scores, Target) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (count-target scores target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func countTarget(scores: Array<Int64>, target: Int64): Int64 {\n\n    }\n}"}],"testcase":"[2,2,3,4,4,4,5,6,6,8]\n4","testable":true,"templateMeta":{"name":"countTarget","params":[{"name":"scores","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"integer"}}}
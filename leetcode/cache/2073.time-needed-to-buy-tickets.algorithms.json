{"id":2195,"fid":"2073","name":"买票需要的时间","slug":"time-needed-to-buy-tickets","link":"https://leetcode.cn/problems/time-needed-to-buy-tickets/description/","percent":70.03441453723254,"level":"Easy","category":"algorithms","en_name":"Time Needed to Buy Tickets","cn_name":"买票需要的时间","totalAC":"42.2K","totalSubmit":"60.2K","likes":86,"dislikes":0,"desc":"<p>有 <code>n</code> 个人前来排队买票，其中第 <code>0</code> 人站在队伍 <strong>最前方</strong> ，第 <code>(n - 1)</code> 人站在队伍 <strong>最后方</strong> 。</p>\n\n<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>tickets</code> ，数组长度为 <code>n</code> ，其中第 <code>i</code> 人想要购买的票数为 <code>tickets[i]</code> 。</p>\n\n<p>每个人买票都需要用掉 <strong>恰好 1 秒</strong> 。一个人 <strong>一次只能买一张票</strong> ，如果需要购买更多票，他必须走到&nbsp; <strong>队尾</strong> 重新排队（<strong>瞬间 </strong>发生，不计时间）。如果一个人没有剩下需要买的票，那他将会 <strong>离开</strong> 队伍。</p>\n\n<p>返回位于位置 <code>k</code>（下标从 <strong>0</strong> 开始）的人完成买票需要的时间（以秒为单位）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong>tickets = [2,3,2], k = 2</p>\n\n<p><strong>输出：</strong>6</p>\n\n<p><strong>解释：</strong></p>\n\n<ul>\n\t<li>队伍一开始为 [2,3,2]，第 k 个人以下划线标识。</li>\n\t<li>在最前面的人买完票后，队伍在第 1 秒变成 [3,<u>2</u>,1]。</li>\n\t<li>继续这个过程，队伍在第 2 秒变为[<u>2</u>,1,2]。</li>\n\t<li>继续这个过程，队伍在第 3 秒变为[1,2,<u>1</u>]。</li>\n\t<li>继续这个过程，队伍在第 4 秒变为[2,<u>1</u>]。</li>\n\t<li>继续这个过程，队伍在第 5 秒变为[<u>1</u>,1]。</li>\n\t<li>继续这个过程，队伍在第 6 秒变为[1]。第 k 个人完成买票，所以返回 6。</li>\n</ul>\n</div>\n\n<p><strong>示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong>tickets = [5,1,1,1], k = 0</p>\n\n<p><strong>输出：</strong>8</p>\n\n<p><strong>解释：</strong></p>\n\n<ul>\n\t<li>队伍一开始为 [<u>5</u>,1,1,1]，第 k 个人以下划线标识。</li>\n\t<li>在最前面的人买完票后，队伍在第 1 秒变成 [1,1,1,<u>4</u>]。</li>\n\t<li>继续这个过程 3 秒，队伍在第 4&nbsp;秒变为[<u>4</u>]。</li>\n\t<li>继续这个过程 4 秒，队伍在第 8&nbsp;秒变为[]。第 k 个人完成买票，所以返回 8。</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == tickets.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= tickets[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt; n</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int timeRequiredToBuy(vector<int>& tickets, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int timeRequiredToBuy(int[] tickets, int k) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def timeRequiredToBuy(self, tickets, k):\n        \"\"\"\n        :type tickets: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} tickets\n * @param {number} k\n * @return {number}\n */\nvar timeRequiredToBuy = function(tickets, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function timeRequiredToBuy(tickets: number[], k: number): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int TimeRequiredToBuy(int[] tickets, int k) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int timeRequiredToBuy(int* tickets, int ticketsSize, int k) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func timeRequiredToBuy(tickets []int, k int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun timeRequiredToBuy(tickets: IntArray, k: Int): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func timeRequiredToBuy(_ tickets: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn time_required_to_buy(tickets: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} tickets\n# @param {Integer} k\n# @return {Integer}\ndef time_required_to_buy(tickets, k)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $tickets\n     * @param Integer $k\n     * @return Integer\n     */\n    function timeRequiredToBuy($tickets, $k) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int timeRequiredToBuy(List<int> tickets, int k) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def timeRequiredToBuy(tickets: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec time_required_to_buy(tickets :: [integer], k :: integer) :: integer\n  def time_required_to_buy(tickets, k) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec time_required_to_buy(Tickets :: [integer()], K :: integer()) -> integer().\ntime_required_to_buy(Tickets, K) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (time-required-to-buy tickets k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func timeRequiredToBuy(tickets: Array<Int64>, k: Int64): Int64 {\n\n    }\n}"}],"testcase":"[2,3,2]\n2","testable":true,"templateMeta":{"name":"timeRequiredToBuy","params":[{"name":"tickets","type":"integer[]"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}
{"id":131,"fid":"131","name":"分割回文串","slug":"palindrome-partitioning","link":"https://leetcode.cn/problems/palindrome-partitioning/description/","percent":75.3731223169798,"level":"Medium","category":"algorithms","en_name":"Palindrome Partitioning","cn_name":"分割回文串","totalAC":"656.3K","totalSubmit":"870.7K","likes":2099,"dislikes":0,"desc":"<p>给你一个字符串 <code>s</code>，请你将<em> </em><code>s</code><em> </em>分割成一些 <span data-keyword=\"substring-nonempty\">子串</span>，使每个子串都是 <strong><span data-keyword=\"palindrome-string\">回文串</span></strong> 。返回 <code>s</code> 所有可能的分割方案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"aab\"\n<strong>输出：</strong>[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"a\"\n<strong>输出：</strong>[[\"a\"]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 16</code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<String>> partition(String s) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function partition(s: string): string[][] {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<IList<string>> Partition(string s) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** partition(char* s, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func partition(s string) [][]string {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun partition(s: String): List<List<String>> {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func partition(_ s: String) -> [[String]] {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn partition(s: String) -> Vec<Vec<String>> {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String[][]}\ndef partition(s)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String[][]\n     */\n    function partition($s) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<String>> partition(String s) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def partition(s: String): List[List[String]] = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec partition(s :: String.t) :: [[String.t]]\n  def partition(s) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec partition(S :: unicode:unicode_binary()) -> [[unicode:unicode_binary()]].\npartition(S) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (partition s)\n  (-> string? (listof (listof string?)))\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func partition(s: String): ArrayList<ArrayList<String>> {\n\n    }\n}"}],"testcase":"\"aab\"","testable":true,"templateMeta":{"name":"partition","params":[{"name":"s","type":"string"}],"return":{"type":"list<list<string>>","dealloc":true}}}
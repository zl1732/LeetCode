{"id":1776,"fid":"1658","name":"将 x 减到 0 的最小操作数","slug":"minimum-operations-to-reduce-x-to-zero","link":"https://leetcode.cn/problems/minimum-operations-to-reduce-x-to-zero/description/","percent":40.29291368132058,"level":"Medium","category":"algorithms","en_name":"Minimum Operations to Reduce X to Zero","cn_name":"将 x 减到 0 的最小操作数","totalAC":"81.7K","totalSubmit":"202.8K","likes":450,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>x</code> 。每一次操作时，你应当移除数组 <code>nums</code> 最左边或最右边的元素，然后从 <code>x</code> 中减去该元素的值。请注意，需要 <strong>修改</strong> 数组以供接下来的操作使用。</p>\n\n<p>如果可以将 <code>x</code> <strong>恰好</strong> 减到 <code>0</code> ，返回<strong> 最小操作数 </strong>；否则，返回 <code>-1</code> 。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,1,4,2,3], x = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>最佳解决方案是移除后两个元素，将 x 减到 0 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [5,6,7,8,9], x = 4\n<strong>输出：</strong>-1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,2,20,1,1,3], x = 10\n<strong>输出：</strong>5\n<strong>解释：</strong>最佳解决方案是移除后三个元素和前两个元素（总共 5 次操作），将 x 减到 0 。\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 10<sup>5</sup></code></li>\n\t<li><code>1 <= nums[i] <= 10<sup>4</sup></code></li>\n\t<li><code>1 <= x <= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minOperations(vector<int>& nums, int x) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minOperations(int[] nums, int x) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minOperations(self, nums, x):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar minOperations = function(nums, x) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minOperations(nums: number[], x: number): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinOperations(int[] nums, int x) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int minOperations(int* nums, int numsSize, int x) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func minOperations(nums []int, x int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minOperations(nums: IntArray, x: Int): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minOperations(_ nums: [Int], _ x: Int) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_operations(nums: Vec<i32>, x: i32) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} x\n# @return {Integer}\ndef min_operations(nums, x)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @return Integer\n     */\n    function minOperations($nums, $x) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minOperations(List<int> nums, int x) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minOperations(nums: Array[Int], x: Int): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_operations(nums :: [integer], x :: integer) :: integer\n  def min_operations(nums, x) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_operations(Nums :: [integer()], X :: integer()) -> integer().\nmin_operations(Nums, X) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-operations nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func minOperations(nums: Array<Int64>, x: Int64): Int64 {\n\n    }\n}"}],"testcase":"[1,1,4,2,3]\n5","testable":true,"templateMeta":{"name":"minOperations","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"x"}],"return":{"type":"integer"}}}
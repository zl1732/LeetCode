{"id":76,"fid":"76","name":"最小覆盖子串","slug":"minimum-window-substring","link":"https://leetcode.cn/problems/minimum-window-substring/description/","percent":48.29145907166818,"level":"Hard","category":"algorithms","en_name":"Minimum Window Substring","cn_name":"最小覆盖子串","totalAC":"898.2K","totalSubmit":"1.9M","likes":3400,"dislikes":0,"desc":"<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>\"\"</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>\n\t<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ADOBECODEBANC\", t = \"ABC\"\n<strong>输出：</strong>\"BANC\"\n<strong>解释：</strong>最小覆盖子串 \"BANC\" 包含来自字符串 t 的 'A'、'B' 和 'C'。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"a\", t = \"a\"\n<strong>输出：</strong>\"a\"\n<strong>解释：</strong>整个字符串 s 是最小覆盖子串。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> s = \"a\", t = \"aa\"\n<strong>输出:</strong> \"\"\n<strong>解释:</strong> t 中两个字符 'a' 均应包含在 s 的子串中，\n因此没有符合条件的子字符串，返回空字符串。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code><sup>m == s.length</sup></code></li>\n\t<li><code><sup>n == t.length</sup></code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> 和 <code>t</code> 由英文字母组成</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>进阶：</strong>你能设计一个在 <code>o(m+n)</code> 时间内解决此问题的算法吗？","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minWindow(s: string, t: string): string {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"char* minWindow(char* s, char* t) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func minWindow(s string, t string) string {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String minWindow(String s, String t) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S, T) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-window s t)\n  (-> string? string? string?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func minWindow(s: String, t: String): String {\n\n    }\n}"}],"testcase":"\"ADOBECODEBANC\"\n\"ABC\"","testable":true,"templateMeta":{"name":"minWindow","params":[{"name":"s","type":"string"},{"name":"t","type":"string"}],"return":{"type":"string"}}}
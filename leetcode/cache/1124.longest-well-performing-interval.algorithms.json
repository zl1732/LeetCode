{"id":1219,"fid":"1124","name":"表现良好的最长时间段","slug":"longest-well-performing-interval","link":"https://leetcode.cn/problems/longest-well-performing-interval/description/","percent":41.63515547560483,"level":"Medium","category":"algorithms","en_name":"Longest Well-Performing Interval","cn_name":"表现良好的最长时间段","totalAC":"56.7K","totalSubmit":"136.2K","likes":581,"dislikes":0,"desc":"<p>给你一份工作时间表&nbsp;<code>hours</code>，上面记录着某一位员工每天的工作小时数。</p>\n\n<p>我们认为当员工一天中的工作小时数大于&nbsp;<code>8</code> 小时的时候，那么这一天就是「<strong>劳累的一天</strong>」。</p>\n\n<p>所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格<strong> 大于</strong>「不劳累的天数」。</p>\n\n<p>请你返回「表现良好时间段」的最大长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>hours = [9,9,6,0,6,6,9]\n<strong>输出：</strong>3\n<strong>解释：</strong>最长的表现良好时间段是 [9,9,6]。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>hours = [6,6,6]\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hours.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= hours[i] &lt;= 16</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int longestWPI(int[] hours) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def longestWPI(self, hours: List[int]) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def longestWPI(self, hours):\n        \"\"\"\n        :type hours: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} hours\n * @return {number}\n */\nvar longestWPI = function(hours) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function longestWPI(hours: number[]): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int LongestWPI(int[] hours) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int longestWPI(int* hours, int hoursSize) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func longestWPI(hours []int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun longestWPI(hours: IntArray): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func longestWPI(_ hours: [Int]) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn longest_wpi(hours: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} hours\n# @return {Integer}\ndef longest_wpi(hours)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $hours\n     * @return Integer\n     */\n    function longestWPI($hours) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int longestWPI(List<int> hours) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def longestWPI(hours: Array[Int]): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec longest_wpi(hours :: [integer]) :: integer\n  def longest_wpi(hours) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec longest_wpi(Hours :: [integer()]) -> integer().\nlongest_wpi(Hours) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (longest-wpi hours)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func longestWPI(hours: Array<Int64>): Int64 {\n\n    }\n}"}],"testcase":"[9,9,6,0,6,6,9]","testable":true,"templateMeta":{"name":"longestWPI","params":[{"name":"hours","type":"integer[]"}],"return":{"type":"integer"}}}
{"id":20,"fid":"20","name":"有效的括号","slug":"valid-parentheses","link":"https://leetcode.cn/problems/valid-parentheses/description/","percent":45.169249171827325,"level":"Easy","category":"algorithms","en_name":"Valid Parentheses","cn_name":"有效的括号","totalAC":"2.3M","totalSubmit":"5.2M","likes":4820,"dislikes":0,"desc":"<p>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code>，<code>']'</code>&nbsp;的字符串 <code>s</code> ，判断字符串是否有效。</p>\n\n<p>有效字符串需满足：</p>\n\n<ol>\n\t<li>左括号必须用相同类型的右括号闭合。</li>\n\t<li>左括号必须以正确的顺序闭合。</li>\n\t<li>每个右括号都有一个对应的相同类型的左括号。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"()\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>true</span></p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"()[]{}\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>true</span></p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"(]\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>false</span></p>\n</div>\n\n<p><strong class=\"example\">示例 4：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"([])\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>true</span></p>\n</div>\n\n<p><strong class=\"example\">示例 5：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"([)]\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>false</span></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> 仅由括号 <code>'()[]{}'</code> 组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isValid(self, s: str) -> bool:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function isValid(s: string): boolean {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"bool isValid(char* s) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func isValid(s string) bool {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isValid(String s) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func isValid(s: String): Bool {\n\n    }\n}"}],"testcase":"\"()\"","testable":true,"templateMeta":{"name":"isValid","params":[{"name":"s","type":"string"}],"return":{"type":"boolean"}}}
{"id":525,"fid":"525","name":"连续数组","slug":"contiguous-array","link":"https://leetcode.cn/problems/contiguous-array/description/","percent":55.34305958852875,"level":"Medium","category":"algorithms","en_name":"Contiguous Array","cn_name":"连续数组","totalAC":"94K","totalSubmit":"169.8K","likes":805,"dislikes":0,"desc":"<p>给定一个二进制数组 <code>nums</code> , 找到含有相同数量的 <code>0</code> 和 <code>1</code> 的最长连续子数组，并返回该子数组的长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [0,1]\n<strong>输出：</strong>2\n<strong>说明：</strong>[0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [0,1,0]\n<strong>输出：</strong>2\n<strong>说明：</strong>[0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [0,1,1,1,1,1,0,0,0]\n<b>输出：</b>6\n<b>解释：</b>[1,1,1,0,0,0] 是具有相同数量 0 和 1 的最长连续子数组。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findMaxLength(int[] nums) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findMaxLength(nums: number[]): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindMaxLength(int[] nums) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int findMaxLength(int* nums, int numsSize) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func findMaxLength(nums []int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findMaxLength(nums: IntArray): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMaxLength(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_max_length(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_length(nums)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaxLength($nums) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findMaxLength(List<int> nums) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMaxLength(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_max_length(nums :: [integer]) :: integer\n  def find_max_length(nums) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_max_length(Nums :: [integer()]) -> integer().\nfind_max_length(Nums) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-max-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func findMaxLength(nums: Array<Int64>): Int64 {\n\n    }\n}"}],"testcase":"[0,1]","testable":true,"templateMeta":{"name":"findMaxLength","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}
{"id":187,"fid":"187","name":"重复的DNA序列","slug":"repeated-dna-sequences","link":"https://leetcode.cn/problems/repeated-dna-sequences/description/","percent":55.45236230299796,"level":"Medium","category":"algorithms","en_name":"Repeated DNA Sequences","cn_name":"重复的DNA序列","totalAC":"193.5K","totalSubmit":"349K","likes":623,"dislikes":0,"desc":"<p><strong>DNA序列</strong>&nbsp;由一系列核苷酸组成，缩写为<meta charset=\"UTF-8\" />&nbsp;<code>'A'</code>,&nbsp;<code>'C'</code>,&nbsp;<code>'G'</code>&nbsp;和<meta charset=\"UTF-8\" />&nbsp;<code>'T'</code>.。</p>\n\n<ul>\n\t<li>例如，<meta charset=\"UTF-8\" /><code>\"ACGAATTCCG\"</code>&nbsp;是一个 <strong>DNA序列</strong> 。</li>\n</ul>\n\n<p>在研究 <strong>DNA</strong> 时，识别 DNA 中的重复序列非常有用。</p>\n\n<p>给定一个表示 <strong>DNA序列</strong> 的字符串 <code>s</code> ，返回所有在 DNA 分子中出现不止一次的&nbsp;<strong>长度为&nbsp;<code>10</code></strong>&nbsp;的序列(子字符串)。你可以按 <strong>任意顺序</strong> 返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n<strong>输出：</strong>[\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"AAAAAAAAAAAAA\"\n<strong>输出：</strong>[\"AAAAAAAAAA\"]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code><code>==</code><code>'A'</code>、<code>'C'</code>、<code>'G'</code>&nbsp;or&nbsp;<code>'T'</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> findRepeatedDnaSequences(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findRepeatedDnaSequences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string[]}\n */\nvar findRepeatedDnaSequences = function(s) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findRepeatedDnaSequences(s: string): string[] {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> FindRepeatedDnaSequences(string s) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findRepeatedDnaSequences(char* s, int* returnSize) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func findRepeatedDnaSequences(s string) []string {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findRepeatedDnaSequences(s: String): List<String> {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findRepeatedDnaSequences(_ s: String) -> [String] {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_repeated_dna_sequences(s: String) -> Vec<String> {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String[]}\ndef find_repeated_dna_sequences(s)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function findRepeatedDnaSequences($s) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> findRepeatedDnaSequences(String s) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findRepeatedDnaSequences(s: String): List[String] = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_repeated_dna_sequences(s :: String.t) :: [String.t]\n  def find_repeated_dna_sequences(s) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_repeated_dna_sequences(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nfind_repeated_dna_sequences(S) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-repeated-dna-sequences s)\n  (-> string? (listof string?))\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func findRepeatedDnaSequences(s: String): ArrayList<String> {\n\n    }\n}"}],"testcase":"\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"","testable":true,"templateMeta":{"name":"findRepeatedDnaSequences","params":[{"name":"s","type":"string"}],"return":{"type":"list<string>"}}}
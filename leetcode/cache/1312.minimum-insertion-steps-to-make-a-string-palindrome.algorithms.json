{"id":1437,"fid":"1312","name":"让字符串成为回文串的最少插入次数","slug":"minimum-insertion-steps-to-make-a-string-palindrome","link":"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/","percent":70.87879704996894,"level":"Hard","category":"algorithms","en_name":"Minimum Insertion Steps to Make a String Palindrome","cn_name":"让字符串成为回文串的最少插入次数","totalAC":"44.7K","totalSubmit":"63.1K","likes":277,"dislikes":0,"desc":"<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，每一次操作你都可以在字符串的任意位置插入任意字符。</p>\n\n<p>请你返回让&nbsp;<code>s</code>&nbsp;成为回文串的&nbsp;<strong>最少操作次数</strong>&nbsp;。</p>\n\n<p>「回文串」是正读和反读都相同的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"zzazz\"\n<strong>输出：</strong>0\n<strong>解释：</strong>字符串 \"zzazz\" 已经是回文串了，所以不需要做任何插入操作。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"mbadm\"\n<strong>输出：</strong>2\n<strong>解释：</strong>字符串可变为 \"mbdadbm\" 或者 \"mdbabdm\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"leetcode\"\n<strong>输出：</strong>5\n<strong>解释：</strong>插入 5 个字符后字符串变为 \"leetcodocteel\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code>&nbsp;中所有字符都是小写字母。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minInsertions(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minInsertions(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minInsertions(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minInsertions(self, s: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int minInsertions(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinInsertions(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar minInsertions = function(s) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minInsertions(s: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minInsertions($s) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minInsertions(_ s: String) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minInsertions(s: String): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minInsertions(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minInsertions(s string) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef min_insertions(s)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minInsertions(s: String): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_insertions(s: String) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-insertions s)\n  (-> string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_insertions(S :: unicode:unicode_binary()) -> integer().\nmin_insertions(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_insertions(s :: String.t) :: integer\n  def min_insertions(s) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func minInsertions(s: String): Int64 {\n\n    }\n}"}],"testcase":"\"zzazz\"","testable":true,"templateMeta":{"name":"minInsertions","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}
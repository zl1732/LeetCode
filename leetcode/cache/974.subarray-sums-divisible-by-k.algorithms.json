{"id":1016,"fid":"974","name":"和可被 K 整除的子数组","slug":"subarray-sums-divisible-by-k","link":"https://leetcode.cn/problems/subarray-sums-divisible-by-k/description/","percent":49.76582270512546,"level":"Medium","category":"algorithms","en_name":"Subarray Sums Divisible by K","cn_name":"和可被 K 整除的子数组","totalAC":"79.1K","totalSubmit":"158.9K","likes":558,"dislikes":0,"desc":"<p>给定一个整数数组 <code>nums</code>&nbsp;和一个整数 <code>k</code> ，返回其中元素之和可被 <code>k</code>&nbsp;整除的非空&nbsp;<strong>子数组</strong> 的数目。</p>\n\n<p><strong>子数组</strong> 是数组中&nbsp;<strong>连续</strong>&nbsp;的部分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [4,5,0,-2,-3,1], k = 5\n<strong>输出：</strong>7\n<strong>解释：\n</strong>有 7 个子数组满足其元素之和可被 k = 5 整除：\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [5], k = 9\n<strong>输出:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int subarraysDivByK(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int subarraysDivByK(int[] nums, int k) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def subarraysDivByK(self, nums: List[int], k: int) -> int:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def subarraysDivByK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraysDivByK = function(nums, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function subarraysDivByK(nums: number[], k: number): number {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SubarraysDivByK(int[] nums, int k) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"int subarraysDivByK(int* nums, int numsSize, int k) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func subarraysDivByK(nums []int, k int) int {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun subarraysDivByK(nums: IntArray, k: Int): Int {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func subarraysDivByK(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn subarrays_div_by_k(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarrays_div_by_k(nums, k)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subarraysDivByK($nums, $k) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int subarraysDivByK(List<int> nums, int k) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def subarraysDivByK(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec subarrays_div_by_k(nums :: [integer], k :: integer) :: integer\n  def subarrays_div_by_k(nums, k) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec subarrays_div_by_k(Nums :: [integer()], K :: integer()) -> integer().\nsubarrays_div_by_k(Nums, K) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (subarrays-div-by-k nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func subarraysDivByK(nums: Array<Int64>, k: Int64): Int64 {\n\n    }\n}"}],"testcase":"[4,5,0,-2,-3,1]\n5","testable":true,"templateMeta":{"name":"subarraysDivByK","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}
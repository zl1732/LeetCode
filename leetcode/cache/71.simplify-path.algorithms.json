{"id":71,"fid":"71","name":"简化路径","slug":"simplify-path","link":"https://leetcode.cn/problems/simplify-path/description/","percent":47.92007068249761,"level":"Medium","category":"algorithms","en_name":"Simplify Path","cn_name":"简化路径","totalAC":"317K","totalSubmit":"661.5K","likes":837,"dislikes":0,"desc":"<p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的&nbsp;Unix 风格 <strong>绝对路径 </strong>（以 <code>'/'</code> 开头），请你将其转化为 <strong>更加简洁的规范路径</strong>。</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">在 Unix 风格的文件系统中规则如下：</p>\n\n<ul>\n\t<li class=\"MachineTrans-lang-zh-CN\">一个点&nbsp;<code>'.'</code>&nbsp;表示当前目录本身。</li>\n\t<li class=\"MachineTrans-lang-zh-CN\">此外，两个点 <code>'..'</code>&nbsp;表示将目录切换到上一级（指向父目录）。</li>\n\t<li class=\"MachineTrans-lang-zh-CN\">任意多个连续的斜杠（即，<code>'//'</code>&nbsp;或 <code>'///'</code>）都被视为单个斜杠 <code>'/'</code>。</li>\n\t<li class=\"MachineTrans-lang-zh-CN\">任何其他格式的点（例如，<code>'...'</code>&nbsp;或 <code>'....'</code>）均被视为有效的文件/目录名称。</li>\n</ul>\n\n<p>返回的 <strong>简化路径</strong> 必须遵循下述格式：</p>\n\n<ul>\n\t<li>始终以斜杠 <code>'/'</code> 开头。</li>\n\t<li>两个目录名之间必须只有一个斜杠 <code>'/'</code> 。</li>\n\t<li>最后一个目录名（如果存在）<strong>不能 </strong>以 <code>'/'</code> 结尾。</li>\n\t<li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <code>'.'</code> 或 <code>'..'</code>）。</li>\n</ul>\n\n<p>返回简化后得到的 <strong>规范路径</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">path = \"/home/\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>\"/home\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>应删除尾随斜杠。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>path = \"/home//foo/\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>\"/home/foo\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>多个连续的斜杠被单个斜杠替换。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">path = \"/home/user/Documents/../Pictures\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>\"/home/user/Pictures\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>两个点&nbsp;<code>\"..\"</code>&nbsp;表示上一级目录（父目录）。</p>\n</div>\n\n<p><strong class=\"example\">示例 4：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>path = \"/../\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>\"/\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>不可能从根目录上升一级目录。</p>\n</div>\n\n<p><strong class=\"example\">示例 5：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>path = \"/.../a/../b/c/../d/./\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>\"/.../b/d\"</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p><code>\"...\"</code>&nbsp;在这个问题中是一个合法的目录名。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= path.length &lt;= 3000</code></li>\n\t<li><code>path</code> 由英文字母，数字，<code>'.'</code>，<code>'/'</code> 或 <code>'_'</code> 组成。</li>\n\t<li><code>path</code> 是一个有效的 Unix 风格绝对路径。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string simplifyPath(string path) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def simplifyPath(self, path: str) -> str:\n        "},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function simplifyPath(path: string): string {\n    \n};"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string SimplifyPath(string path) {\n        \n    }\n}"},{"value":"c","text":"C","defaultCode":"char* simplifyPath(char* path) {\n    \n}"},{"value":"golang","text":"Go","defaultCode":"func simplifyPath(path string) string {\n    \n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun simplifyPath(path: String): String {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func simplifyPath(_ path: String) -> String {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn simplify_path(path: String) -> String {\n        \n    }\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} path\n# @return {String}\ndef simplify_path(path)\n    \nend"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function simplifyPath($path) {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String simplifyPath(String path) {\n    \n  }\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}"},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec simplify_path(path :: String.t) :: String.t\n  def simplify_path(path) do\n    \n  end\nend"},{"value":"erlang","text":"Erlang","defaultCode":"-spec simplify_path(Path :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsimplify_path(Path) ->\n  ."},{"value":"racket","text":"Racket","defaultCode":"(define/contract (simplify-path path)\n  (-> string? string?)\n  )"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func simplifyPath(path: String): String {\n\n    }\n}"}],"testcase":"\"/home/\"","testable":true,"templateMeta":{"name":"simplifyPath","params":[{"name":"path","type":"string"}],"return":{"type":"string"}}}